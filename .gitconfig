#==============
# .gitconfig
#==============

# forces you to configure your Git user on a per-repository basis
# Multiple personailities in Git
# http://collectiveidea.com/blog/archives/2016/04/04/multiple-personalities-in-git
[user]
  useConfigOnly = true

# cache credentials in the secure keychain
[credential]
        helper = osxkeychain

# Use separate file for username / github token / etc
[include]
        path = ~/.gitconfig.local

# Git mergetool
[merge]
        tool = opendiff

# git fs aliases
# https://shuhrat.github.io/programming/git-lfs-tips-and-tricks.html
[filter "lfs"]
  clean = git lfs clean %f
  smudge = git lfs smudge %f
  required = true


# default push behaviour
[push]
  default = matching    # push all matching branches


[color]
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = red



# A good list of aliases http://haacked.com/archive/2014/07/28/github-flow-aliases/
[alias]
        # Staging
        a = add
        aa = add --all

        # Branch
        br = branch
        branch-name = rev-parse --abbrev-ref HEAD
        branch-diff = diff master...HEAD
        branch-files = "!git diff master...HEAD --name-status | sed '/^D/d ; s/^.\\s\\+//'"

        # Commit
        c = commit
        ca = commit -a
        #cm = commit -m
        cal = !git add -A && git commit              # Commit all changes
        cam = commit -am
        cne = commit --no-edit
        amend = commit --amend
        amend-all = !git add --all && git commit --amend --reuse-message=HEAD

        # Clone
        cl = clone
        sclone = clone --depth=1

        # Checkout
        co = checkout
        cob = checkout -b

        # Export
        export =

        # Cherry-pick
        cp = cherry-pick

        # Diff
        d = diff --color-words
        dc = diff --cached
        df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

        # Show modified files in last commit
        dl = "!git ll -1"

        # Show a diff last commit
        dlc = diff --cached HEAD^

        # Show content (full diff) of a commit given a revision
        dr  = "!f() { git diff "$1"^.."$1"; }; f"
        lc  = "!f() { git ll "$1"^.."$1"; }; f"
        diffr  = "!f() { git diff "$1"^.."$1"; }; f"



        # Edit .gitconfig
        ec = config --global -e

        # Find a file path in codebase
        f = "!git ls-files | grep -i"

        # all the commits related to a file, with the diff of the changes
        fl = log -u

        # Search/grep your entire codebase for a string
        gr = grep -Ii

        # Grep from root folder
        gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

        # Merge
        m = merge

        # Pull
        up = !git pull --rebase --prune $@ && git submodule update --init --recursive
        plom = pull origin master
        plum = pull upstream master
        preb = !git fetch upstream && git rebase upstream/master

        # Push
        p = push
        pom = push origin master
        poh = push origin head

        # Stash
        st = stash
        stp = stash pop

        # Status/Logging
        s = status
        ss = status -sb
        hist = log --graph --pretty=custom           # Show custom graph


        # List all your Aliases
        la = "!git config -l | grep alias | cut -c 7-"


        lc = shortlog --summary --numbered           # List contributors

        # List commits in short form, with colors and branch/tag annotations.
        ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

        # List commits showing changed files
        ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

        # List with no colours
        lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

        # List oneline commits showing dates
        lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

        # List oneline commits showing relative dates
        ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

        # default look for short git log
        le = log --oneline --decorate

        # show last tag
        lt = describe --tags --abbrev=0


        # Reset
        unstage = reset HEAD --                      # Mixed reset (affects HEAD and Index)
        #undo = reset --soft HEAD~1                   # Undo last commit (affects HEAD only)
        reset = reset --hard HEAD~1                  # Remove last commit (from HEAD, Index and Working Dir)

        # Remote
        r = remote -v

        sl = stash list
        sa = stash apply
        ss = stash save



        # Submodules
        subpl = submodule update --init --recursive


        # tags


        # add tag
        addtag = "!f() {git tag -a $1 -m $2 && git push origin --tags; }; f"

        # delete tag
        deltag = "!f() { git tag -d $1 && git push origin :refs/tags/$1; }; f"

        # Remove the tag with the specified tag name if
        # exists and tag the latest commit with that name
        retag = "!f() { \
          git tag -d "$1" &> /dev/null; \
          git tag $1; \
        }; f"








        # Github flow
        # http://haacked.com/archive/2014/07/28/github-flow-aliases/
        # http://haacked.com/archive/2015/06/29/git-migrate/
        # http://codingmonster.co.uk/blog/1168/automatically-keep-your-history-clean-with-git-aliases
        # http://jayturpin.com/archive/2016/04/23/my_git_cheatsheet/
        ec = config --global -e
        co = checkout
        cob = checkout -b
        set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`
        pushit = "!f() { git rev-parse --abbrev-ref HEAD ; }; git push --set-upstream origin `f`"
        up = !git pull --rebase --prune $@ && git submodule update --init --recursive
        startb = "!f() { git cob $1 && git pushit; }; f"
        syncb = !git fetch origin ${1-master} && git rebase origin/${1-master}
        cleanb = !git rebase -i origin/${1-master}
        finishb = "!f() { git rev-parse --abbrev-ref HEAD | xargs -I _branch sh -c 'git checkout ${1-master} -f && git pull origin && git merge _branch --ff-only && git push origin ${1-master}'; }; f"
        deleteb = "!f() { git branch -d $1 && git push origin --delete $1;}; f"
        cml = !git add -A && git commit -m
        cm = "!f() { git cml \"$@\" && git push origin;}; f"
        save = !git add -A && git commit -m 'SAVEPOINT'
        wip = !git add -u && git commit -m "WIP"
        undo = reset HEAD~1 --mixed
        amend = commit -a --amend
        bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
        bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
        wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
        migrate = "!f(){ CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-'$CURRENT@{u}'} && git rebase --onto ${2-master} $CURRENT; }; f"
        squash = !git checkout master && git merge --no-ff --no-commit
        nuke = !git reset --hard && git clean -fdx
        new = "!f() { git log $1@{1}..$1@{0} \"$@\" ;}; f"

        # Git flow
        # new = !git pull origin develop && git flow feature start
        # done = !git pull origin develop && git flow feature finish "$(git symbolic-ref --short HEAD | sed -n 's/^feature\\///p')"
        # go = !git checkout $1 && pull
        # master = !git checkout master && pull
        # develop = !git checkout develop && pull
        # mmm = !git fetch origin master && git rebase origin/master
        # ddd = !git fetch origin develop && git rebase origin/develop

        # Misc
        publish = "!git push --set-upstream origin $(git branch-name)"

#------------------------------------------------------------------

  # Find commits by source code

  cc = "!f() { \
      git log --pretty=custom --decorate --date=short -S\"$1\"; \
  }; f"

#------------------------------------------------------------------

  # Find commits by commit message

  cmsg = "!f() { \
      git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
  }; f"

#------------------------------------------------------------------

  # Credit an author on the latest commit

  credit = "!f() { \
      if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
          git commit --amend --author \"$1 <$2>\" -C HEAD; \
      fi \
  }; f"

#------------------------------------------------------------------

  # List remote branches

  lrb = "!f() { \
      remote="${1:-origin}"; \
      git ls-remote --heads "$remote"; \
  }; f"

#------------------------------------------------------------------

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch

  mpr = "!f() { \
      declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
      declare branch=\"${2:-$currentBranch}\"; \
      if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
          git fetch origin refs/pull/$1/head:pr/$1 && \
          git checkout -B $branch && \
          git rebase $branch pr/$1 && \
          git checkout -B $branch && \
          git merge pr/$1 && \
          git branch -D pr/$1 && \
          git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
      fi \
  }; f"

#------------------------------------------------------------------

  # Remove the tag with the specified tag name if
  # exists and tag the latest commit with that name

  retag = "!f() { \
      git tag -d "$1" &> /dev/null; \
      git tag $1; \
  }; f"

#------------------------------------------------------------------

  # Git Alias to remove local tag and remote tag in one command!

  rmtag = "!f() { \
        git tag -d ${1}; \
        git push origin :refs/tags/${1}; \
        git tag; \
  }; f"

#-------------------------------------------------------------------



[core]
  excludesfile = ~/.gitignore

[http]


# Rewrites of repo paths

[url "https://github.com/"]
  insteadOf = "gh://"

[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[url "https://bitbucket.org/"]
    insteadOf = bb:
